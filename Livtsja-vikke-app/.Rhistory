style = "margin-top: 10px; font-size: 14px; font-style: italic; color = #555;"
)
)),
sidebarLayout(
sidebarPanel(
weatherInputUI("weatherInput")
),
mainPanel(
weatherPlotUI("weatherPlot"),
dataTableOutput("table")
)
)
)
# Main app server
server <- function(input, output, session) {
weather_data <- weatherInputServer("weatherInput")
weatherPlotServer("weatherPlot", weather_data)
# Display data table
output$table <- renderDataTable({
req(weather_data())
datatable(weather_data())
})
}
# Run the app
shinyApp(ui, server)
# Global Settings
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(DT)
library(leaflet)
# Define your API key here
API_KEY <- NULL
# Function to fetch weather data from Visual Crossing
fetch_weather_data <- function(lat, lon, start_date, end_date, api_key) {
tryCatch({
# Construct the API URL
url <- glue::glue(
"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{lat},{lon}/{start_date}/{end_date}?unitGroup=metric&elements=datetime,temp&include=days&key={api_key}&contentType=json"
)
# Print the URL for debugging
print(paste("Constructed API URL:", url))
# Make the API request
response <- httr::GET(url)
# Check for successful response
if (httr::status_code(response) != 200) {
stop("API request failed: ", httr::status_code(response), " ", httr::http_status(response)$message)
}
# Parse the response
data <- httr::content(response, as = "parsed", type = "application/json")
# Extract relevant data (daily mean temperatures)
if (!"days" %in% names(data)) {
stop("Unexpected API response structure: 'days' field missing.")
}
weather_data <- data$days %>%
purrr::map_df(~ data.frame(
date = .x$datetime,
mean_temp = .x$temp,
lat = lat,
lon = lon
))
return(weather_data)
}, error = function(e) {
message("Failed to fetch data: ", e$message)
return(NULL)
})
}
# Function to calculate degree days
calculate_degree_days <- function(data, min_threshold = 8, max_threshold = 21) {
data %>%
mutate(
degree_days = case_when(
mean_temp < min_threshold ~ 0,
mean_temp > max_threshold ~ max_threshold - min_threshold,
TRUE ~ mean_temp - min_threshold
)
)
}
# Function to calculate Thermal Suitability Index
calculate_thermal_suitability_index <- function(data) {
data %>%
group_by(lat, lon) %>%
mutate(
cumulative_degree_days = cumsum(degree_days),
thermal_suitability_index = cumulative_degree_days / 245
) %>%
ungroup()
}
# Module UI for weather input
weatherInputUI <- function(id) {
ns <- NS(id)
tagList(
textInput(ns("api_key"), "Enter API Key", ""),
dateRangeInput(ns("date_range"), "Select Date Range",
start = Sys.Date() - 3, end = Sys.Date()),
textAreaInput(ns("coordinates"), "Enter Latitude, Longitude, and ID (one per line, format: 'lat, lon, ID')",
"70.3706, 31.1107, Varanger\n63.4305, 10.3951, Trøndelag\n69.9662, 23.2412, Alta-Fjord\n70.0525, 25.0050, Porsanger\n61.5055, 8.5643, Grindaheim"),
actionButton(ns("fetch"), "Fetch Weather Data"),
downloadButton(ns("download"), "Download CSV")
)
}
# Module server for weather input
weatherInputServer <- function(id) {
moduleServer(id, function(input, output, session) {
ns <- session$ns
# Reactive value to store fetched data
weather_data <- reactiveVal()
# Observe API key and update global variable
observeEvent(input$api_key, {
req(input$api_key)
assign("API_KEY", input$api_key, envir = .GlobalEnv)
})
# Fetch data when button is clicked
observeEvent(input$fetch, {
req(input$date_range, input$coordinates, API_KEY)
start_date <- as.character(input$date_range[1])
end_date <- as.character(input$date_range[2])
coordinates <- strsplit(input$coordinates, "\n")[[1]]
all_data <- do.call(rbind, lapply(coordinates, function(coord) {
lat_lon_id <- strsplit(coord, ",")[[1]]
lat <- as.numeric(lat_lon_id[1])
lon <- as.numeric(lat_lon_id[2])
id <- trimws(lat_lon_id[3])
if (!is.na(lat) && !is.na(lon) && !is.na(id)) {
tryCatch(
fetch_weather_data(lat, lon, start_date, end_date, API_KEY) %>%
mutate(ID = id),
error = function(e) {
showNotification(sprintf("Failed to fetch data for %s", coord), type = "error")
NULL
}
)
} else {
showNotification(sprintf("Invalid input: %s", coord), type = "error")
NULL
}
}))
weather_data(calculate_thermal_suitability_index(calculate_degree_days(all_data)))
})
# Provide CSV download
output$download <- downloadHandler(
filename = function() {
paste("weather_data", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(weather_data(), file, row.names = FALSE)
}
)
# Return weather data
return(weather_data)
})
}
# Module UI for plotting
weatherPlotUI <- function(id) {
ns <- NS(id)
tagList(
leafletOutput(ns("map"), height = "400px"),
plotOutput(ns("plot_temp")),
plotOutput(ns("plot_degree_days")),
plotOutput(ns("plot_tsi"))
)
}
# Module server for plotting
weatherPlotServer <- function(id, data) {
moduleServer(id, function(input, output, session) {
output$map <- renderLeaflet({
req(data())
coords <- unique(data()[, c("lat", "lon", "ID")])
leaflet() %>%
addTiles() %>%
addCircleMarkers(
lng = coords$lon,
lat = coords$lat,
popup = paste("ID:", coords$ID, "Lat:", coords$lat, "Lon:", coords$lon),
radius = 5,
color = "blue",
fill = TRUE
) %>%
addLabelOnlyMarkers(
lng = coords$lon,
lat = coords$lat,
label = coords$ID,
labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE)
)
})
output$plot_temp <- renderPlot({
req(data())
ggplot(data(), aes(x = as.Date(date), y = mean_temp, color = interaction(ID))) +
geom_line(size = 1.5) +
labs(title = "Temperature Over Time", x = "Date", y = "Mean Temperature (°C)", color = "ID") +
theme_minimal()
})
output$plot_degree_days <- renderPlot({
req(data())
ggplot(data(), aes(x = as.Date(date), y = degree_days, color = interaction(ID))) +
geom_line(size = 1.5) +
labs(title = "Degree Days Over Time", x = "Date", y = "Degree Days", color = "ID") +
theme_minimal()
})
output$plot_tsi <- renderPlot({
req(data())
ggplot(data(), aes(x = as.Date(date), y = thermal_suitability_index, color = interaction(ID))) +
geom_line(size = 1.5) +
labs(title = "Thermal Suitability Index Over Time", x = "Date", y = "Thermal Suitability Index", color = "ID") +
theme_minimal()
})
})
}
# Main app UI
ui <- fluidPage(
titlePanel(div(
"Livtsja-vikke app",
div(
"Before using this app, please sign up for a free account at VisualCrossing.com and copy your API Key (can be found in the account section). This is necessary to access the weather data and allows you to extract 1000 data records per day.",
style = "margin-top: 10px; font-size: 14px; font-style: italic; color = #555;"
)
)),
sidebarLayout(
sidebarPanel(
weatherInputUI("weatherInput")
),
mainPanel(
weatherPlotUI("weatherPlot"),
dataTableOutput("table")
)
)
)
# Main app server
server <- function(input, output, session) {
weather_data <- weatherInputServer("weatherInput")
weatherPlotServer("weatherPlot", weather_data)
# Display data table
output$table <- renderDataTable({
req(weather_data())
datatable(weather_data())
})
}
# Run the app
shinyApp(ui, server)
# Global Settings
library(shiny)
library(httr)
library(jsonlite)
library(dplyr)
library(ggplot2)
library(DT)
library(leaflet)
# Define your API key here
API_KEY <- NULL
# Function to fetch weather data from Visual Crossing
fetch_weather_data <- function(lat, lon, start_date, end_date, api_key) {
tryCatch({
# Construct the API URL
url <- glue::glue(
"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{lat},{lon}/{start_date}/{end_date}?unitGroup=metric&elements=datetime,temp&include=days&key={api_key}&contentType=json"
)
# Print the URL for debugging
print(paste("Constructed API URL:", url))
# Make the API request
response <- httr::GET(url)
# Check for successful response
if (httr::status_code(response) != 200) {
stop("API request failed: ", httr::status_code(response), " ", httr::http_status(response)$message)
}
# Parse the response
data <- httr::content(response, as = "parsed", type = "application/json")
# Extract relevant data (daily mean temperatures)
if (!"days" %in% names(data)) {
stop("Unexpected API response structure: 'days' field missing.")
}
weather_data <- data$days %>%
purrr::map_df(~ data.frame(
date = .x$datetime,
mean_temp = .x$temp,
lat = lat,
lon = lon
))
return(weather_data)
}, error = function(e) {
message("Failed to fetch data: ", e$message)
return(NULL)
})
}
# Function to calculate degree days
calculate_degree_days <- function(data, min_threshold = 8, max_threshold = 21) {
data %>%
mutate(
degree_days = case_when(
mean_temp < min_threshold ~ 0,
mean_temp > max_threshold ~ max_threshold - min_threshold,
TRUE ~ mean_temp - min_threshold
)
)
}
# Function to calculate Thermal Suitability Index
calculate_thermal_suitability_index <- function(data) {
data %>%
group_by(lat, lon) %>%
mutate(
cumulative_degree_days = cumsum(degree_days),
thermal_suitability_index = cumulative_degree_days / 245
) %>%
ungroup()
}
# Module UI for weather input
weatherInputUI <- function(id) {
ns <- NS(id)
tagList(
textInput(ns("api_key"), "Enter API Key", ""),
dateRangeInput(ns("date_range"), "Select Date Range",
start = Sys.Date() - 3, end = Sys.Date()),
textAreaInput(ns("coordinates"), "Enter Latitude, Longitude, and ID (one per line, format: 'lat, lon, ID')",
"70.3706, 31.1107, Varanger\n63.4305, 10.3951, Trøndelag\n69.9662, 23.2412, Alta-Fjord\n70.0525, 25.0050, Porsanger\n61.5055, 8.5643, Grindaheim"),
actionButton(ns("fetch"), "Fetch Weather Data"),
downloadButton(ns("download"), "Download CSV")
)
}
# Module server for weather input
weatherInputServer <- function(id) {
moduleServer(id, function(input, output, session) {
ns <- session$ns
# Reactive value to store fetched data
weather_data <- reactiveVal()
# Observe API key and update global variable
observeEvent(input$api_key, {
req(input$api_key)
assign("API_KEY", input$api_key, envir = .GlobalEnv)
})
# Fetch data when button is clicked
observeEvent(input$fetch, {
req(input$date_range, input$coordinates, API_KEY)
start_date <- as.character(input$date_range[1])
end_date <- as.character(input$date_range[2])
coordinates <- strsplit(input$coordinates, "\n")[[1]]
all_data <- do.call(rbind, lapply(coordinates, function(coord) {
lat_lon_id <- strsplit(coord, ",")[[1]]
lat <- as.numeric(lat_lon_id[1])
lon <- as.numeric(lat_lon_id[2])
id <- trimws(lat_lon_id[3])
if (!is.na(lat) && !is.na(lon) && !is.na(id)) {
tryCatch(
fetch_weather_data(lat, lon, start_date, end_date, API_KEY) %>%
mutate(ID = id),
error = function(e) {
showNotification(sprintf("Failed to fetch data for %s", coord), type = "error")
NULL
}
)
} else {
showNotification(sprintf("Invalid input: %s", coord), type = "error")
NULL
}
}))
weather_data(calculate_thermal_suitability_index(calculate_degree_days(all_data)))
})
# Provide CSV download
output$download <- downloadHandler(
filename = function() {
paste("weather_data", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(weather_data(), file, row.names = FALSE)
}
)
# Return weather data
return(weather_data)
})
}
# Module UI for plotting
weatherPlotUI <- function(id) {
ns <- NS(id)
tagList(
leafletOutput(ns("map"), height = "400px"),
plotOutput(ns("plot_temp")),
plotOutput(ns("plot_degree_days")),
plotOutput(ns("plot_tsi"))
)
}
# Module server for plotting
weatherPlotServer <- function(id, data) {
moduleServer(id, function(input, output, session) {
output$map <- renderLeaflet({
req(data())
coords <- data() %>%
group_by(lat, lon, ID) %>%
summarise(final_tsi = last(thermal_suitability_index), .groups = 'drop')
coords <- coords %>%
mutate(color = case_when(
final_tsi < 0.5 ~ "blue",
final_tsi < 1 ~ "yellow",
final_tsi < 2 ~ "orange",
TRUE ~ "red"
))
leaflet() %>%
addTiles() %>%
addCircleMarkers(
lng = coords$lon,
lat = coords$lat,
popup = paste("ID:", coords$ID, "TSI:", round(coords$final_tsi, 2)),
radius = 5,
color = coords$color,
fill = TRUE
)
})
output$plot_temp <- renderPlot({
req(data())
ggplot(data(), aes(x = as.Date(date), y = mean_temp, color = interaction(ID))) +
geom_line(size = 1.5) +
labs(title = "Temperature Over Time", x = "Date", y = "Mean Temperature (°C)", color = "ID") +
theme_minimal()
})
output$plot_degree_days <- renderPlot({
req(data())
ggplot(data(), aes(x = as.Date(date), y = degree_days, color = interaction(ID))) +
geom_line(size = 1.5) +
labs(title = "Degree Days Over Time", x = "Date", y = "Degree Days", color = "ID") +
theme_minimal()
})
output$plot_tsi <- renderPlot({
req(data())
ggplot(data(), aes(x = as.Date(date), y = thermal_suitability_index, color = interaction(ID))) +
geom_line(size = 1.5) +
labs(title = "Thermal Suitability Index Over Time", x = "Date", y = "Thermal Suitability Index", color = "ID") +
theme_minimal()
})
})
}
# Main app UI
ui <- fluidPage(
titlePanel(div(
"Livtsja-vikke app",
div(
"Before using this app, please sign up for a free account at VisualCrossing.com and copy your API Key (can be found in the account section). This is necessary to access the weather data and allows you to extract 1000 data records per day.",
style = "margin-top: 10px; font-size: 14px; font-style: italic; color = #555;"
)
)),
sidebarLayout(
sidebarPanel(
weatherInputUI("weatherInput")
),
mainPanel(
weatherPlotUI("weatherPlot"),
dataTableOutput("table")
)
)
)
# Main app server
server <- function(input, output, session) {
weather_data <- weatherInputServer("weatherInput")
weatherPlotServer("weatherPlot", weather_data)
# Display data table
output$table <- renderDataTable({
req(weather_data())
datatable(weather_data())
})
}
# Run the app
shinyApp(ui, server)
# Run the app
shinyApp(ui, server)
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='0q8ner-hannah-vineer', token='1A556D05E487CF3C6BDE96DECE78BE33', secret='rF+MbCJ6Ns5xp9ba8GL7FaGN7MK85TDqgGE1+SUA')
# Run the app
shinyApp(ui, server)
# Run the app
shinyApp(ui, server)
runApp('Users/hannah/Library/CloudStorage/OneDrive-TheUniversityofLiverpool/git/brainworm/Livtsja-vikke/app.R')
setwd(dir = 'app/')
setwd(dir = '/Users/hannah/OneDrive - The University of Liverpool/git/brainworm/Livtsja-vikke/app/')
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
rsconnect::deployApp(getwd())
setwd(dir = '/Users/hannah/OneDrive - The University of Liverpool/git/brainworm/Livtsja-vikke/Livtsja-vikke-app//')
getwd()
rsconnect::deployApp(getwd())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp(getwd())
